{
	"info": {
		"_postman_id": "25461ae3-0642-4f59-9b02-992683b4dcf8",
		"name": "Hotel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26295377"
	},
	"item": [
		{
			"name": "token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 which means test passed\", function () { //Butun test ler test ismi ile basliyor.\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json() //Bana response olarak gelen data yi al bunu json a cevir ve response adli degiskene ata demek. \r",
							"//gelecek dataya(cevap) genelde payload ya da response denir.  \r",
							"\r",
							"pm.environment.set(\"token\", response.token) //set islemi key value seklindedir. (token key in ismi.)\r",
							"//let daha sonradan degistirebilecegimiz degiskenler icin kullanilan degisken tipi.\r",
							"//Butun hersey syntax olarak pm ile basliyor.\r",
							"console.log(response.token) //token i console a yazdirir. \"46e93d67942b90a\"\r",
							"\r",
							"let payload = JSON.parse(responseBody) //gelen response un body sini json olarak parse et birlestir payload adinda degiskene ata.\r",
							"console.log(payload) //{token: \"46e93d67942b90a\"}\r",
							"\r",
							"//Birine bu collection i gonderdigimizde initial value cıkmıyor, sadece current value kaliyor. Yani biz kendi firmamizda initial value ya \r",
							"//kendimize ozel tanimlama yapabiliriz.\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Batch.103",
							"type": "string"
						},
						{
							"key": "username",
							"value": "batch_yuzuc",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Body calismadan once calisip(static block gibi) burdaki data uzerinde manipulasyon yapmamiza olanak saglayan bir alan. \r",
							"\r",
							"pm.environment.set(\"totalprice\", parseInt(Math.random()*1000))\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let payload = pm.response.json()\r",
							"pm.environment.set(\"bookingid\", payload.bookingid)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 which means test passed\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var payload = pm.response.json();\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(payload.firstname);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
							"});\r",
							"\r",
							"//End point sabittir bu yuzden degistirilmez. Path params ve query params end pointe degil(bu sekilde hard code olur) alt satırda bulunan key value text box ina yazilir.\r",
							"pm.test(\"Is totalprice's value correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.totalprice).to.eql(pm.environment.get(\"totalprice\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PatchBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletebooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/booking/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Team arkadaşimiza yaptigimiz api request i gondermek icin yandaki code kısmını açıp copy snippet yapıyoruz. (curl komutu -> curl --location) bunu cmd ye yapıştır(fakat curl komutu bu copy de oldugu icin tekrar yazma.) bu sekilde cmd de acabiliriz.(cmd ye bunun icin ozel ayar yapmalısın, git bash te acabilirsin)\r",
							"//Newman de rapor alabiliriz. Bunun icin collection i export et, fakat json uzantılı oldugundan emin ol. newman run dosya yolu(dosyayı surukleyebilirsin)\r",
							"//Ancak collection i dynamic yaptıysan environment i da export etmelisin yoksa hata alirsin. \r",
							"//Bu sefer terminale sunu yaz; newman run (collection)dosya yolu -e (environment)dosya yolu \r",
							"//-g --> global environment icin\r",
							"//-e --> environment icin\r",
							"\r",
							"//newman-reporter-htmlextra raporunu da alabilirsin, comutu su sekilde yukarıda yazdıklarının yanına -r htmlextra yaz(newman run collection.json -r htmlextra)\r",
							"//Dosyayı Users>tugba>newman e kaydedecektir.\r",
							"//Bu komutlari unutursan newman npm sitesinden bakabilirsin.\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].bookingid).to.eql(35);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		}
	]
}